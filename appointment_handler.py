import os
import logging
from datetime import datetime
from typing import Optional
from sqlalchemy.orm import Session
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from models import Client, Appointment, Schedule
from config import PHOTOS_DIR, APPOINTMENT_DURATION

logger = logging.getLogger(__name__)

class AppointmentManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, session: Session):
        self.session = session
        self.temp_data = {}

    async def start_appointment_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
        if user_id in self.temp_data:
            await query.edit_message_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–î–∞", callback_data="restart_appointment")],
                    [InlineKeyboardButton("–ù–µ—Ç", callback_data="back_to_menu")]
                ])
            )
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self.temp_data[user_id] = {
            'step': 'name',
            'name': None,
            'phone': None,
            'description': None,
            'photo_path': None,
            'date': None,
            'time': None
        }

        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_appointment")]])
        )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in self.temp_data:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'."
            )
            return

        data = self.temp_data[user_id]
        text = update.message.text

        if data['step'] == 'name':
            data['name'] = text
            data['step'] = 'phone'
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_appointment")]])
            )
        elif data['step'] == 'phone':
            data['phone'] = text
            data['step'] = 'description'
            await update.message.reply_text(
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_appointment")]])
            )
        elif data['step'] == 'description':
            data['description'] = text
            data['step'] = 'photo'
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–î–∞", callback_data="add_photo")],
                    [InlineKeyboardButton("–ù–µ—Ç", callback_data="skip_photo")],
                    [InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_appointment")]
                ])
            )

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in self.temp_data or self.temp_data[user_id]['step'] != 'photo':
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(PHOTOS_DIR, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        file_path = os.path.join(PHOTOS_DIR, f"{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg")
        await file.download_to_drive(file_path)
        
        self.temp_data[user_id]['photo_path'] = file_path
        self.temp_data[user_id]['step'] = 'date'
        
        await update.message.reply_text(
            "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_appointment")]])
        )

    async def cancel_appointment_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        
        if user_id in self.temp_data:
            # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if self.temp_data[user_id].get('photo_path'):
                try:
                    os.remove(self.temp_data[user_id]['photo_path'])
                except:
                    pass
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.temp_data.pop(user_id)
        
        await query.edit_message_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

    def clear_appointment_data(self, user_id):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
        if user_id in self.temp_data:
            # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if self.temp_data[user_id].get('photo_path'):
                try:
                    os.remove(self.temp_data[user_id]['photo_path'])
                except:
                    pass
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.temp_data.pop(user_id)

    async def handle_appointment_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏"""
        try:
            time_str = update.message.text
            time = datetime.strptime(time_str, "%H:%M").time()
            date = context.user_data.get('appointment_date')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è
            existing_appointment = self.session.query(Appointment).filter(
                Appointment.date == date,
                Appointment.time == time
            ).first()
            
            if existing_appointment:
                await update.message.reply_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            appointment = Appointment(
                client_name=context.user_data['client_name'],
                phone=context.user_data['client_phone'],
                problem_description=context.user_data['problem_description'],
                date=date,
                time=time,
                photo_path=context.user_data.get('photo_path')
            )
            
            self.session.add(appointment)
            self.session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            confirmation_message = (
                "‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {appointment.client_name}\n"
                f"üìÖ *–î–∞—Ç–∞:* {appointment.date.strftime('%d.%m.%Y')}\n"
                f"üïê *–í—Ä–µ–º—è:* {appointment.time.strftime('%H:%M')}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {appointment.phone}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:* {appointment.problem_description}\n"
            )
            
            if appointment.photo_path:
                confirmation_message += "\nüì∏ *–§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ*"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await update.message.reply_text(
                confirmation_message,
                parse_mode='Markdown'
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if context.user_data.get('is_admin'):
                await update.message.reply_text(
                    "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞'."
                )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.clear_appointment_data(context)
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)"
            )

    async def show_available_times(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.") 