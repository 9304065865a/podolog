import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import os
import sys
import atexit

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from sqlalchemy.orm import sessionmaker
from telegram.error import Conflict, NetworkError

from models import engine, Base, Client, Appointment, Schedule
from schedule_handler import ScheduleHandler
from appointment_handler import AppointmentHandler
from config import (
    BOT_TOKEN, ADMIN_ID, PHOTOS_DIR, WORK_START_TIME, WORK_END_TIME,
    LUNCH_START_TIME, LUNCH_END_TIME, APPOINTMENT_DURATION, SCHEDULE_DAYS_AHEAD
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
Session = sessionmaker(bind=engine)
session = Session()

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
schedule_handler = ScheduleHandler(session)
appointment_handler = AppointmentHandler(session)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_admin_keyboard():
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∏", callback_data="appointments")],
        [InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_client_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
        [InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = get_admin_keyboard() if user_id == ADMIN_ID else get_client_keyboard()
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_menu":
        keyboard = get_admin_keyboard() if query.from_user.id == ADMIN_ID else get_client_keyboard()
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        return

    if query.data == "schedule":
        await schedule_handler.show_schedule(update, context)
    elif query.data == "fill_schedule":
        await schedule_handler.show_schedule_filling(update, context)
    elif query.data.startswith("date_"):
        await schedule_handler.handle_date_selection(update, context)
    elif query.data.startswith("time_"):
        await schedule_handler.handle_time_selection(update, context)
    elif query.data == "book":
        await appointment_handler.start_appointment_creation(update, context)
    elif query.data == "about":
        await show_about(update, context)
    elif query.data == "share":
        await handle_share(update, context)

async def handle_share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    bot = await context.bot.get_me()
    share_text = (
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—à–µ–ª –ø–æ–ª–µ–∑–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ø–æ–¥–æ–ª–æ–≥—É: @{bot.username}\n\n"
        "–° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ:\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏!"
    )
    keyboard = [[InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", url=f"https://t.me/share/url?url=https://t.me/{bot.username}&text={share_text}")]]
    await query.edit_message_text(
        share_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    about_text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ø–æ–¥–æ–ª–æ–≥—É\n\n"
        "‚Ä¢ –£–¥–æ–±–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º\n"
        "‚Ä¢ –í—ã–±–æ—Ä —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    await query.edit_message_text(
        about_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        await appointment_handler.handle_photo(update, context)
    else:
        await appointment_handler.handle_text(update, context)

def check_pid():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç"""
    pid = str(os.getpid())
    pidfile = "bot.pid"

    if os.path.isfile(pidfile):
        with open(pidfile, 'r') as f:
            old_pid = f.read().strip()
        if os.path.exists(f"/proc/{old_pid}"):
            print(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID {old_pid}")
            sys.exit(1)
    
    with open(pidfile, 'w') as f:
        f.write(pid)
    
    def remove_pidfile():
        os.remove(pidfile)
    
    atexit.register(remove_pidfile)

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    check_pid()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 